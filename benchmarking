#! /bin/bash
cat <<X5_EOF >/root/script.py
import json
from os import listdir
import xml.etree.ElementTree as ET
import socket
import time
import commands
import sys
import stomp

def extract_values(line):
    values = line[line.find("(")+1:line.find(")")]
    value = values[:values.find("+")].strip()
    desviation = values[values.find("+/-")+3:].strip()
    unit = line[line.find(")")+1:].strip()
    if unit == 'ms':
            value = '%.5f' % round(float(value)/1000, 5)
            desviation = '%.5f' % round(float(desviation)/1000, 5)
            unit = 's'
    if float(desviation) == 0:
        return {'value': value, 'unit':unit}
    else:
        return {'value': value, 'error': desviation, 'unit':unit}


def fill_results(result, key, lines, i):
    entries = lines[i][lines[i].find("=")+1:lines[i].find(")")].strip()
    cpu = extract_values(lines[i+1])
    real = extract_values(lines[i+2])
    vmem = extract_values(lines[i+3])
    malloc = extract_values(lines[i+4])
    nalloc = extract_values(lines[i+5])
    rt = extract_values(lines[i+6])
    result.update({key: {'entries': entries,
                         'values':{
                                  'cpu': cpu,
                                  'real': real,
                                  'vmem': vmem
                                 }
                         }
                   })
                       #'malloc': malloc,
                       #'nalloc': nalloc,
                       #'rt': rt} })


def fill_memory_results(result, key, lines, i):
    def extract_memory_value(line):
        value = line[line.find("INFO")+len("INFO"):]
        value = value[value.find(":")+2:].strip()
        unit = value[value.find(" ")+1:].strip()
        value = value[:value.find(" ")]
        return {'value':value, 'unit':unit}

    result.update({key:{ 'vm_data': extract_memory_value(lines[i+1]),
                    'vm_exe': extract_memory_value(lines[i+2]),
                    'VmHWM': extract_memory_value(lines[i+3]),
                    'VmLck': extract_memory_value(lines[i+4]),
                    'VmLib': extract_memory_value(lines[i+5]),
                    'VmPTE': extract_memory_value(lines[i+6]),
                    'VmPeak': extract_memory_value(lines[i+7]),
                    'VmRSS': extract_memory_value(lines[i+8]),
                    'VmSize': extract_memory_value(lines[i+9]),
                    'VmStk': extract_memory_value(lines[i+10]),
                    'VmSwap': extract_memory_value(lines[i+11])}})


def fill_memory_leak_results(result, key, lines, i):
    def extract_memory_value(line):
        value = line[line.find("INFO")+len("INFO"):]
        value = value[value.find(":")+2:].strip()
        unit = value[value.find(" ")+1:].strip()
        value = value[:value.find(" ")]
        if unit == 'ms':
            value = round(value/1000, 5)
            unit = 's'
        return {'value':value, 'unit':unit}
        return value
    result.update({key: {'first-evt': extract_memory_value(lines[i+1]),
                    '10th -evt':extract_memory_value(lines[i+2]),
                    'last -evt':extract_memory_value(lines[i+3]),
                    'evt  2-20':extract_memory_value(lines[i+4]),
                    'evt 21-50':extract_memory_value(lines[i+5]),
                    'evt 51+':extract_memory_value(lines[i+6])} })

result = {'benchmarking': {},'metadata': {}}

path = "/scratch/KV"
file_name = None
for f in listdir(path):
    if f.find("PerfMon_summary_") >= 0:
        file_name = "%s/%s" % (path, f)
        break

file = open(file_name,"r")
reading_stats = False

lines = file.read().split("\n")
result['benchmarking'].update({'kv': {}})
aux_result = None
for i in range(0,len(lines)):
    line = lines[i]
    if line.find("## PerfMonFlags ##")> 0:
        thread = line[line.find("KV.thr.")+len("KV.thr.")]
        result['benchmarking']['kv'].update({"thr_"+thread:{}})
        aux_result = result['benchmarking']['kv']['thr_'+thread]
    if line.find("Statistics for 'ini'") > 0:
        fill_results(aux_result, 'initialization', lines, i)
    if line.find("Statistics for 'evt'") > 0:
        fill_results(aux_result, 'evt', lines, i)
    if line.find("Statistics for 'fin'") > 0:
        fill_results(aux_result, 'finalization', lines, i)
    if line.find("memory infos from") > 0:
        fill_memory_results(aux_result, 'memory', lines, i)
    if line.find("vmem-leak estimation") > 0:
        fill_memory_leak_results(aux_result, 'vmem-leak', lines, i)


path = '/root/.phoronix-test-suite/test-results'
result['benchmarking'].update({'phoronix': {}})
for f in listdir(path):
    if f.find('pts-results-viewer') < 0 and f[0] is not '.':
        tree = ET.parse("%s/%s/%s" % (path,f,"test-1.xml"))
        root = tree.getroot()
        title = root.find('Result').find('Title').text
        value = root.find('Result').find('Data').find('Entry').find('Value').text
        result['benchmarking']['phoronix'].update({title:value})


result.update({'_timestamp':int(time.time())})
result['metadata'].update({'ip': socket.gethostbyname(socket.gethostname())})
result['metadata'].update({'cloud': sys.argv[1]})
result['metadata'].update({'UID':"%s%s%s" %(result['metadata']['ip'].replace('.',''),
                                            result['_timestamp'],
                                            result['metadata']['cloud'])})
result['metadata'].update({'VO': sys.argv[2]})
result['metadata'].update({'spec':{ 'osdist':commands.getoutput("lsb_release -d 2>/dev/null").split(":")[1][1:],
                                    'pyver': sys.version.split()[0],
                                    'cpuname': commands.getoutput("cat /proc/cpuinfo | grep '^model name' | tail -n 1").split(':')[1].lstrip(),
                                    'cpunum' : commands.getoutput("cat /proc/cpuinfo | grep '^processor' |wc -l"),
                                    'bogomips': commands.getoutput("cat /proc/cpuinfo | grep '^bogomips' | tail -n 1").split(':')[1].lstrip(),
                                    'meminfo': commands.getoutput("cat /proc/meminfo | grep 'MemTotal:'").split()[1]}})

print_result = json.dumps({}, indent=2)

conn = stomp.Connection([('dashb-test-mb',61113)])
conn.start()
conn.connect('vmspecprod','iT31TLpY4Dkd4Ovk',True)
conn.send(body=print_result, destination='/queue/test')

time.sleep(2)
conn.disconnect()
X5_EOF

function run_kvkit(){
    mkdir /scratch/KV ; cd /scratch/KV
    wget https://kv.roma1.infn.it/KV/sw-mgr --no-check-certificate -O sw-mgr
    chmod u+x sw-mgr


    export VO_ATLAS_SW_DIR=/cvmfs/atlas.cern.ch/repo/sw
    echo 'source /cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc46-opt/17.8.0/cmtsite/asetup.sh --dbrelease=current AtlasProduction 17.8.0.9 opt gcc46 slc6 64'
    source /cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc46-opt/17.8.0/cmtsite/asetup.sh --dbrelease=current AtlasProduction 17.8.0.9 opt gcc46 slc6 64


    SW_MGR_START=`date +"%y-%m-%d %H:%M:%S"`
    echo "start sw-mgr ${SW_MGR_START}"
    
    wget $KVBMK -O /tmp/KVbmk.xml

    KVSUITE=`grep -i "<kvsuite>" /tmp/KVbmk.xml | head -1 | sed -E "s@.*>(.*)<.*@\1@"`
    echo KVBMK $KVBMK
    echo KVSUITE $KVSUITE

    echo "./sw-mgr -a 17.8.0.9-x86_64 --test 17.8.0.9 --no-tag -p /cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc46-opt/17.8.0 --kv-disable ALL --kv-enable $KVSUITE --kv-conf $KVBMK --kv-keep --kvpost --kvpost-tag $KVTAG --tthreads $KVTHR "
    
    REFDATE=`date +\%y-\%m-\%d_\%H-\%M-\%S`
    KVLOG=kv_$REFDATE.out
    ./sw-mgr -a 17.8.0.9-x86_64 --test 17.8.0.9 --no-tag -p /cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc46-opt/17.8.0 --kv-disable ALL --kv-enable $KVSUITE --kv-conf $KVBMK --kv-keep --kvpost --kvpost-tag $KVTAG --tthreads $KVTHR > $KVLOG
    #./sw-mgr -a 17.8.0.9-x86_64 --test 17.8.0.9 --no-tag -p /cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc46-opt/17.8.0 --kv-disable ALL --kv-enable $KVSUITE --kv-conf $KVBMK --kv-keep --tthreads $KVTHR > $KVLOG
    [ $? -ne 0 ] && exit 1 

    TESTDIR=`ls -tr | grep kvtest_ | tail -1`
    df -h > space_available.log
    tar -cvjf ${TESTDIR}_${REFDATE}.tar.bz2 ${TESTDIR}/KV.thr.*/data/*/*log $KVLOG space_available.log
    SW_MGR_STOP=`date +"%y-%m-%d %H:%M:%S"`
    echo "end sw-mgr ${SW_MGR_STOP}"

    PERFMONLOG=PerfMon_summary_`date +\%y-\%m-\%d_\%H:\%M:\%S`.out
    echo "host_ip: `hostname`" >> $PERFMONLOG
    echo "start sw-mgr ${SW_MGR_START}">> $PERFMONLOG
    echo "end sw-mgr ${SW_MGR_STOP}" >> $PERFMONLOG
    grep -H PerfMon $TESTDIR/KV.thr.*/data/*/*log >> $PERFMONLOG
}

pip install stomp.py
KVTAG=$1
KVTHR=1
KVBMK="http://test-giordano.web.cern.ch/test-giordano/KV-fastInstall/KVbmk.xml"

time run_kvkit   | tee -a /root/run_kvkit_`date +\%y-\%m-\%d_\%H:\%M:\%S`.out

time for test in  compress-7zip encode-mp3 x264 build-linux-kernel; do echo "Running ${test} Test ..."; time /usr/bin/phoronix-test-suite batch-run pts/${test} > ${test}.log ;done
tar -cvzf /root/test-results.tgz /root/.phoronix-test-suite/test-results/*

/root/script.py $1 $2